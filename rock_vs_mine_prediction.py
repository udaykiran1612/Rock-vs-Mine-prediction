# -*- coding: utf-8 -*-
"""Rock-vs-Mine-prediction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1T2AVI9cXL7RsH4zit8RfLGB6TeRs_O4k
"""



"""importing the dependencies"""

import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score

"""data collection and data processing"""

#loading dataset to pandas dataframe
sonar_data = pd.read_csv('/content/sonar data.csv',header=None)

sonar_data.head()

sonar_data.shape

sonar_data.isnull().sum()

sonar_data.describe()

sonar_data[60].value_counts()

"""M == MINE
R == ROCK
"""

sonar_data.groupby(60).mean()

"""Seperating data and labels"""

X = sonar_data.drop(columns=60,axis=1)
Y = sonar_data[60]

print(X)

print(Y)

X_train,X_test,Y_train,Y_test = train_test_split(X,Y,test_size = 0.1 ,stratify = Y ,random_state =1)

print(X.shape,X_train.shape,X_test.shape)

"""model training"""

model = LogisticRegression()
#taraing the logistic regression  model

model.fit(X_train,Y_train)

X_train_pred = model.predict(X_train)
training_data_accuracy = accuracy_score(X_train_pred,Y_train)

print('accuracy on training data : ',training_data_accuracy)

X_test_pred = model.predict(X_test)
test_data_accuracy = accuracy_score(X_test_pred,Y_test)

print('accuracy on test data:',test_data_accuracy)

input_data =(0.0453,0.0523,0.0843,0.0689,0.1183,0.2583,0.2156,0.3481,0.3337,0.2872,0.4918,0.6552,0.6919,0.7797,0.7464,0.9444,1.0000,0.8874,0.8024,0.7818,0.5212,0.4052,0.3957,0.3914,0.3250,0.3200,0.3271,0.2767,0.4423,0.2028,0.3788,0.2947,0.1984,0.2341,0.1306,0.4182,0.3835,0.1057,0.1840,0.1970,0.1674,0.0583,0.1401,0.1628,0.0621,0.0203,0.0530,0.0742,0.0409,0.0061,0.0125,0.0084,0.0089,0.0048,0.0094,0.0191,0.0140,0.0049,0.0052,0.0044)
input_data_as_numpy_array = np.asarray(input_data)
input_data_reshaped = input_data_as_numpy_array.reshape(1,-1)
prediction = model.predict(input_data_reshaped)
print(prediction)

if (prediction[0] == 'R'):
  print("the object is a Rock")
else:
  print("the object is a mine")

